{
  "name": "kuka R850  ros driver",
  "tagline": "kuka R850 ROS Indigo package ",
  "body": "### kuka R850  ros driver\r\nROS driver for the Kuka R850 industrial arm.  \r\nenvironment: ubuntu14.04  ROS indigo  \r\n\r\nMigration from fuerte ROSBUID to indigo CATKIN \r\n\r\nOriginal auther Chris Burbridge   \r\nmail:cburbridge@gmail.com   \r\nfrom : https://github.com/uobirlab/kuka \r\n\r\nROS indigo version   \r\nmaintainer: Johnson   \r\nschwarmcyc@hotmail.com  \r\n\r\n#### Installation prerequisite\r\n    sudo apt-get install ros-indigo-arm-navigation-msgs\r\n###This stack comprises of three packages:\r\n###kuka_node\r\n\r\nThis is the main driver node. It provides a server that Kuka robot control box connects to using the Kuka XML protocol.\r\n\r\nParameters:kuka_description: The URDF of the Kuka arm.\r\n\r\nSubscriptions:    \"/kuka/softstop\": std_msgs/Bool \r\n- stops any active trajectory if anything is published on this topic.\r\n\r\nPublishes:    \"/kuka_state\": sensor_msgs/JointState \r\n- The joint positions and currents.\r\n\r\nServices/Actions:    \"/kuka/set_trajectory\" : kuka_node/SetTrajectory \r\n- service that sets the queue of target joint positions. Provides no feedback as to the state of the trajectory.\r\n\r\n\"/kuka/execute_trajectory\" : kuka_node/ExecuteTrajectory \r\n- action server that sets the target joint states to execute given trajectory and publishes feedback messages about the percentage completed. Can be preempted.\r\n\r\nBoth above trajectory methods work on trajectory_msgs/JointTrajectory messages. A trajectory of a single point results in the arm taking a straight line in joint space to that point, only the trajectory_msgs/JointTrajectoryPoint.points.positions[] is considered, velocity control is not implemented.\r\n  \r\n###kuka_sim\r\n\r\nThis node provides a simulation of the kuka arm communication. It connects to the kuka_node server and communicates in the same way as the real arm. Commanded positions are \"simulated\" with zero error.\r\nkuka_launch\r\n\r\nprovides a single launch file \"kuka.launch\" that starts a kuka_node and a robot_state_publisher. Once launched, either the real Kuka arm can be started or the kuka_sim node. \r\n\r\n###Build\r\n```\r\n$git clone https://github.com/YuehChuan/kuka850_ws.git\r\n$cd kuka850_ws\r\n$source environment.sh\r\n$catkin_make\r\n```\r\nAfter finishing build  \r\n`$source environment.sh` again.\r\n\r\n###usage  \r\nOpen 2 terminals\r\n\r\nTerminal 1  \r\n```\r\n$cd ~kuka850_ws\r\n$source environment.sh\r\n$sudo su\r\n```\r\nFirst,set root in order to get higher process priority   \r\ncommand would send every 12ms to kuka KRC controller.   \r\n`$roslaunch kuka_node kuka.launch`\r\nto fire up server with ip localhost and port 6008\r\n\r\nTerminal 2\r\n```\r\n$cd ~kuka850_ws\r\n$source environment.sh\r\n$rosrun kuka_sim CommsSim\r\n```  \r\nkuka_sim is the virtual kuka robot client for testing the connection.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}